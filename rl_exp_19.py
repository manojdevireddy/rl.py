# -*- coding: utf-8 -*-
"""rl exp 19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CiO-H7ePZhnYxYh7a__LkCjlflEK-7zy
"""

import numpy as np

# Define the environment
class Environment:
    def __init__(self):
        self.states = [0, 1, 2, 3]  # States representing different positions
        self.actions = [0, 1]  # Actions: 0 - move left, 1 - move right
        self.rewards = {3: 1}  # Reward 1 when reaching state 3
        self.start_state = 0

    def step(self, state, action):
        if action == 1:  # Moving right
            return min(state + 1, 3)
        else:  # Moving left
            return max(state - 1, 0)

    def reward(self, state):
        return self.rewards.get(state, 0)

# Q-Learning algorithm
class QLearningAgent:
    def __init__(self, environment, alpha=0.1, gamma=0.9, epsilon=0.1):
        self.environment = environment
        self.q_table = np.zeros((len(environment.states), len(environment.actions)))
        self.alpha = alpha  # Learning rate
        self.gamma = gamma  # Discount factor
        self.epsilon = epsilon  # Exploration rate

    def choose_action(self, state):
        if np.random.uniform(0, 1) < self.epsilon:
            return np.random.choice(self.environment.actions)
        else:
            return np.argmax(self.q_table[state])

    def update_q_table(self, state, action, reward, next_state):
        td_target = reward + self.gamma * np.max(self.q_table[next_state])
        td_error = td_target - self.q_table[state, action]
        self.q_table[state, action] += self.alpha * td_error

    def train(self, episodes):
        for episode in range(episodes):
            state = self.environment.start_state
            while True:
                action = self.choose_action(state)
                next_state = self.environment.step(state, action)
                reward = self.environment.reward(next_state)
                self.update_q_table(state, action, reward, next_state)
                state = next_state
                if state == 3:  # Reached the goal state
                    break

# Main program
if __name__ == "__main__":
    env = Environment()
    q_agent = QLearningAgent(env)
    q_agent.train(episodes=1000)
    print("Q-Table:")
    print(q_agent.q_table)